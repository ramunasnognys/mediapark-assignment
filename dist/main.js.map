{"version":3,"sources":["webpack:///./src/js/get-focusable-elements.js","webpack:///./src/js/burger-menu.js","webpack:///./src/index.js"],"names":["console","log","BurgerMenu","self","state","Proxy","status","enabled","set","key","value","oldValue","processStateChange","parseInt","this","getAttribute","initialMarkup","innerHTML","render","ResizeObserver","observedItems","contentRect","width","maxWidth","observe","parentNode","postRender","trigger","querySelector","panel","root","focusableElements","querySelectorAll","warn","toggle","addEventListener","evt","preventDefault","document","contains","activeElement","forcedStatus","setAttribute","manageFocus","forEach","element","removeAttribute","filter","HTMLElement","window","customElements","define"],"mappings":"y1DAAAA,QAAQC,IAAI,aCAZD,QAAQC,IAAI,c,IAGNC,E,2ZACJ,aAAc,O,4FAAA,SAGZ,IAAMC,EAAO,EAFb,gBADY,OAKZ,EAAKC,MAAQ,IAAIC,MACf,CACEC,OAAQ,OACRC,SAAS,GAEX,CACEC,IADF,SACMJ,EAAOK,EAAKC,GACd,IAAMC,EAAWP,EAAMK,GAMvB,OAJAL,EAAMK,GAAOC,EACTC,IAAaD,GACfP,EAAKS,qBAEAR,KAlBD,E,mCAwBd,WACE,OAAOS,SAASC,KAAKC,aAAa,cAAgB,KAAM,M,+BAG1D,WAAoB,WAClBD,KAAKE,cAAgBF,KAAKG,UAC1BH,KAAKI,SAEY,IAAIC,gBAAe,SAACC,GAAkB,IAC7CC,EAAgBD,EAAc,GAA9BC,YACR,EAAKjB,MAAMG,QAAUc,EAAYC,OAAS,EAAKC,YAIxCC,QAAQV,KAAKW,c,oBAGxB,WACEX,KAAKG,UAAL,4WAMQH,KAAKE,cANb,yCAWAF,KAAKY,e,wBAGP,WAAa,WAMX,GALAZ,KAAKa,QAAUb,KAAKc,cAAc,wCAClCd,KAAKe,MAAQf,KAAKc,cAAc,sCAChCd,KAAKgB,KAAOhB,KAAKc,cAAc,gCAC/Bd,KAAKiB,kBAAyCjB,UDlDhCkB,iBAAiB,8MAJ7BhC,QAAQiC,KAAK,yCACN,ICuDLnB,KAAKa,SAAWb,KAAKe,MAevB,OAdAf,KAAKoB,SAELpB,KAAKa,QAAQQ,iBAAiB,SAAS,SAACC,GACtCA,EAAIC,iBAEJ,EAAKH,iBAGPI,SAASH,iBAAiB,WAAW,WAC9B,EAAKI,SAASD,SAASE,gBAC1B,EAAKN,OAAO,aAOlBpB,KAAKG,UAAYH,KAAKE,gB,oBAGxB,SAAOyB,GACL,GAAIA,EAAc,CAChB,GAAI3B,KAAKV,MAAME,SAAWmC,EACxB,OAGF3B,KAAKV,MAAME,OAASmC,OAEpB3B,KAAKV,MAAME,OAA+B,WAAtBQ,KAAKV,MAAME,OAAsB,OAAS,W,gCAIlE,WAME,OALAQ,KAAKgB,KAAKY,aAAa,SAAU5B,KAAKV,MAAME,QAC5CQ,KAAKgB,KAAKY,aAAa,UAAW5B,KAAKV,MAAMG,QAAU,OAAS,SAEhEO,KAAK6B,cAEG7B,KAAKV,MAAME,QACjB,IAAK,SACHQ,KAAKa,QAAQe,aAAa,gBAAiB,SAC3C5B,KAAKa,QAAQe,aAAa,aAAc,aACxC,MACF,IAAK,OACL,IAAK,UACH5B,KAAKa,QAAQe,aAAa,gBAAiB,QAC3C5B,KAAKa,QAAQe,aAAa,aAAc,iB,yBAK9C,WACE,GAAK5B,KAAKV,MAAMG,QAOhB,OAAQO,KAAKV,MAAME,QACjB,IAAK,OACHQ,KAAKiB,kBAAkBa,SAAQ,SAACC,GAAD,OAC7BA,EAAQC,gBAAgB,eAE1B,MACF,IAAK,U,EACChC,KAAKiB,kB,+lBACNgB,QACC,SAACF,GAAD,MAC2C,wBAAzCA,EAAQ9B,aAAa,mBAExB6B,SAAQ,SAACC,GAAD,OAAaA,EAAQH,aAAa,WAAY,cAlB3D5B,KAAKiB,kBAAkBa,SAAQ,SAACC,GAAD,OAC7BA,EAAQC,gBAAgB,e,iCAtHPE,cA6IrB,mBAAoBC,QACtBC,eAAeC,OAAO,cAAejD,GC7IvCF,QAAQC,IAAI,e","file":"main.js","sourcesContent":["console.log('focusable');\r\n/**\r\n * Returns back a NodeList of focusable elements\r\n * that exist within the passed parnt HTMLElement\r\n *\r\n * @param {HTMLElement} parent HTML element\r\n * @returns {NodeList} The focusable elements that we can find\r\n */\r\n export default (parent) => {\r\n    if (!parent) {\r\n      console.warn('You need to pass a parent HTMLElement');\r\n      return [];\r\n    }\r\n  \r\n    return parent.querySelectorAll('button:not([disabled]), [href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex=\"-1\"]):not([disabled]), details:not([disabled]), summary:not(:disabled)');\r\n  };\r\n  ","console.log(\"burge menu\");\r\nimport getFocusableElements from \"./get-focusable-elements.js\";\r\n\r\nclass BurgerMenu extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n\r\n    const self = this;\r\n\r\n    this.state = new Proxy(\r\n      {\r\n        status: \"open\",\r\n        enabled: false,\r\n      },\r\n      {\r\n        set(state, key, value) {\r\n          const oldValue = state[key];\r\n\r\n          state[key] = value;\r\n          if (oldValue !== value) {\r\n            self.processStateChange();\r\n          }\r\n          return state;\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  get maxWidth() {\r\n    return parseInt(this.getAttribute(\"max-width\") || 9999, 10);\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.initialMarkup = this.innerHTML;\r\n    this.render();\r\n\r\n    const observer = new ResizeObserver((observedItems) => {\r\n      const { contentRect } = observedItems[0];\r\n      this.state.enabled = contentRect.width <= this.maxWidth;\r\n    });\r\n\r\n    // We want to watch the parent like a hawk\r\n    observer.observe(this.parentNode);\r\n  }\r\n\r\n  render() {\r\n    this.innerHTML = `\r\n      <div class=\"burger-menu\" data-element=\"burger-root\">\r\n        <button class=\"burger-menu__trigger\" data-element=\"burger-menu-trigger\" type=\"button\" aria-label=\"Open menu\">\r\n          <span class=\"burger-menu__bar\" aria-hidden=\"true\"></span>\r\n        </button>\r\n        <div class=\"burger-menu__panel\" data-element=\"burger-menu-panel\">\r\n          ${this.initialMarkup} \r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n    this.postRender();\r\n  }\r\n\r\n  postRender() {\r\n    this.trigger = this.querySelector('[data-element=\"burger-menu-trigger\"]');\r\n    this.panel = this.querySelector('[data-element=\"burger-menu-panel\"]');\r\n    this.root = this.querySelector('[data-element=\"burger-root\"]');\r\n    this.focusableElements = getFocusableElements(this);\r\n\r\n    if (this.trigger && this.panel) {\r\n      this.toggle();\r\n\r\n      this.trigger.addEventListener(\"click\", (evt) => {\r\n        evt.preventDefault();\r\n\r\n        this.toggle();\r\n      });\r\n\r\n      document.addEventListener(\"focusin\", () => {\r\n        if (!this.contains(document.activeElement)) {\r\n          this.toggle(\"closed\");\r\n        }\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    this.innerHTML = this.initialMarkup;\r\n  }\r\n\r\n  toggle(forcedStatus) {\r\n    if (forcedStatus) {\r\n      if (this.state.status === forcedStatus) {\r\n        return;\r\n      }\r\n\r\n      this.state.status = forcedStatus;\r\n    } else {\r\n      this.state.status = this.state.status === \"closed\" ? \"open\" : \"closed\";\r\n    }\r\n  }\r\n\r\n  processStateChange() {\r\n    this.root.setAttribute(\"status\", this.state.status);\r\n    this.root.setAttribute(\"enabled\", this.state.enabled ? \"true\" : \"false\");\r\n\r\n    this.manageFocus();\r\n\r\n    switch (this.state.status) {\r\n      case \"closed\":\r\n        this.trigger.setAttribute(\"aria-expanded\", \"false\");\r\n        this.trigger.setAttribute(\"aria-label\", \"Open menu\");\r\n        break;\r\n      case \"open\":\r\n      case \"initial\":\r\n        this.trigger.setAttribute(\"aria-expanded\", \"true\");\r\n        this.trigger.setAttribute(\"aria-label\", \"Close menu\");\r\n        break;\r\n    }\r\n  }\r\n\r\n  manageFocus() {\r\n    if (!this.state.enabled) {\r\n      this.focusableElements.forEach((element) =>\r\n        element.removeAttribute(\"tabindex\")\r\n      );\r\n      return;\r\n    }\r\n\r\n    switch (this.state.status) {\r\n      case \"open\":\r\n        this.focusableElements.forEach((element) =>\r\n          element.removeAttribute(\"tabindex\")\r\n        );\r\n        break;\r\n      case \"closed\":\r\n        [...this.focusableElements]\r\n          .filter(\r\n            (element) =>\r\n              element.getAttribute(\"data-element\") !== \"burger-menu-trigger\"\r\n          )\r\n          .forEach((element) => element.setAttribute(\"tabindex\", \"-1\"));\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nif (\"customElements\" in window) {\r\n  customElements.define(\"burger-menu\", BurgerMenu);\r\n}\r\n\r\nexport default BurgerMenu;\r\n","import \"./styles/style.scss\";\r\nimport \"./js/burger-menu.js\";\r\nimport \"./js/get-focusable-elements.js\";\r\n\r\nconsole.log(\"Hello Media\");\r\n"],"sourceRoot":""}